{"remainingRequest":"/Users/fling/WebstormProjects/todo/node_modules/babel-loader/lib/index.js!/Users/fling/WebstormProjects/todo/node_modules/eslint-loader/index.js??ref--13-0!/Users/fling/WebstormProjects/todo/src/store.js","dependencies":[{"path":"/Users/fling/WebstormProjects/todo/src/store.js","mtime":1543127755030},{"path":"/Users/fling/WebstormProjects/todo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fling/WebstormProjects/todo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fling/WebstormProjects/todo/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex); //Vuex 使用单一状态树\n\nvar state = {\n  // isCollapse:false,\n  user: null //用户信息{userName,userPassword}\n  //更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。\n  //Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数(handler)。\n  //这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数\n\n};\nvar mutations = {\n  setUser: function setUser(state, value) {\n    state.user = value;\n  }\n}; //Action 类似于 mutation,，但是提交的是 mutation，而不是直接变更状态\n\nvar actions = {\n  setUser: function setUser(_ref, user) {\n    var commit = _ref.commit,\n        state = _ref.state;\n    commit('setUser', user);\n  }\n}; // getters are functions\n\nvar getters = {\n  user: function user(state) {\n    return state.user;\n  } // A Vuex instance is created by combining the state, mutations, actions,\n  // and getters.\n\n};\nexport default new Vuex.Store({\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n});",{"version":3,"sources":["/Users/fling/WebstormProjects/todo/src/store.js"],"names":["Vue","Vuex","use","state","user","mutations","setUser","value","actions","commit","getters","Store"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR,E,CAEA;;AACA,IAAME,KAAK,GAAG;AACV;AACAC,EAAAA,IAAI,EAAE,IAFI,CAEC;AAGf;AACA;AACA;;AAPc,CAAd;AASA,IAAMC,SAAS,GAAG;AACdC,EAAAA,OADc,mBACNH,KADM,EACCI,KADD,EACQ;AAClBJ,IAAAA,KAAK,CAACC,IAAN,GAAaG,KAAb;AACH;AAHa,CAAlB,C,CAMA;;AACA,IAAMC,OAAO,GAAG;AACZF,EAAAA,OADY,yBACcF,IADd,EACoB;AAAA,QAAtBK,MAAsB,QAAtBA,MAAsB;AAAA,QAAdN,KAAc,QAAdA,KAAc;AAC5BM,IAAAA,MAAM,CAAC,SAAD,EAAYL,IAAZ,CAAN;AACH;AAHW,CAAhB,C,CAMA;;AACA,IAAMM,OAAO,GAAG;AACZN,EAAAA,IAAI,EAAE,cAAAD,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GADC,CAIhB;AACA;;AALgB,CAAhB;AAOA,eAAe,IAAIH,IAAI,CAACU,KAAT,CAAe;AAC1BR,EAAAA,KAAK,EAALA,KAD0B;AAE1BO,EAAAA,OAAO,EAAPA,OAF0B;AAG1BF,EAAAA,OAAO,EAAPA,OAH0B;AAI1BH,EAAAA,SAAS,EAATA;AAJ0B,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\n\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n//Vuex 使用单一状态树\nconst state = {\n    // isCollapse:false,\n    user: null //用户信息{userName,userPassword}\n}\n\n//更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。\n//Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数(handler)。\n//这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数\n\nconst mutations = {\n    setUser(state, value) {\n        state.user = value\n    }\n}\n\n//Action 类似于 mutation,，但是提交的是 mutation，而不是直接变更状态\nconst actions = {\n    setUser({ commit, state}, user) {\n        commit('setUser', user)\n    }\n}\n\n// getters are functions\nconst getters = {\n    user: state => state.user\n}\n\n// A Vuex instance is created by combining the state, mutations, actions,\n// and getters.\n\nexport default new Vuex.Store({\n    state,\n    getters,\n    actions,\n    mutations\n})\n"]}]}